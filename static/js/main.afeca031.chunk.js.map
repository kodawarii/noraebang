{"version":3,"sources":["components/TableRow.js","components/index.component.js","components/about.component.js","components/home.component.js","App.js","serviceWorker.js","index.js"],"names":["TableRow","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","delete","bind","assertThisInitialized","axios","get","obj","_id","then","console","log","catch","err","react_default","a","createElement","artist","song_name","URL","length","key","max_key","tj_number","ky_number","order","Component","Index","state","songList","_this2","response","setState","data","error","map","object","i","components_TableRow","align","className","style","marginTop","tabRow","About","Home","App","react_router_dom","to","id","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.afeca031.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nclass TableRow extends Component {\r\n\r\n  constructor(props) {\r\n        super(props);\r\n        this.delete = this.delete.bind(this);\r\n    }\r\n    delete() {\r\n        axios.get('http://localhost:4000/song/delete/'+this.props.obj._id)\r\n            .then(console.log('Deleted'))\r\n            .catch(err => console.log(err))\r\n    }\r\n  render() {\r\n    return (\r\n        <tr>\r\n          <td>\r\n            {this.props.obj.artist}\r\n          </td>\r\n          <td>\r\n            {this.props.obj.song_name}\r\n          </td>\r\n          <td>\r\n            {this.props.obj.URL}\r\n          </td>\r\n          <td>\r\n            {this.props.obj.length}\r\n          </td>\r\n          <td>\r\n            {this.props.obj.key}\r\n          </td>\r\n          <td>\r\n            {this.props.obj.max_key}\r\n          </td>\r\n          <td>\r\n            {this.props.obj.tj_number}\r\n          </td>\r\n          <td>\r\n            {this.props.obj.ky_number}\r\n          </td>\r\n          <td>\r\n            {this.props.obj.order}\r\n          </td>\r\n        </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableRow;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport TableRow from './TableRow';\r\n\r\nimport './style-index.css';\r\n\r\nexport default class Index extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {songList: []};\r\n  }\r\n\r\n  componentDidMount(){\r\n    axios.get('http://localhost:4000/song')\r\n    .then(response => {\r\n      this.setState({ songList: response.data });\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    })\r\n  }\r\n\r\n  tabRow(){\r\n    return this.state.songList.map(function(object, i){\r\n        return <TableRow obj={object} key={i} />;\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n       <h3 align=\"center\">노래방 데이터</h3>\r\n          <table className=\"table table-striped\" style={{ marginTop: 20 }}>\r\n            <thead>\r\n              <tr>\r\n                <th>가수</th>\r\n                <th>재목</th>\r\n                <th>URL</th>\r\n                <th>길이</th>\r\n                <th>키</th>\r\n                <th>최고음</th>\r\n                <th>TJ번호</th>\r\n                <th>KY번호</th>\r\n                <th>순</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              { this.tabRow() }\r\n            </tbody>\r\n          </table>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nimport './style-about.css';\r\n\r\nexport default class About extends Component {\r\n\r\n  componentDidMount(){\r\n      \r\n  }\r\n\r\n\r\n  componentDidUpdate() {\r\n        \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n       About Component works\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nimport './style-home.css';\r\n\r\nexport default class Home extends Component {\r\n\r\n  componentDidMount(){\r\n      \r\n  }\r\n\r\n\r\n  componentDidUpdate() {\r\n        \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n       Home Component works\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\nimport './App.css';\n\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nimport Index from './components/index.component'; \nimport About from './components/about.component'; \nimport Home from './components/home.component'; \n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <nav className=\"navbar\">\n            <Link to={'/'} className=\"navbar-brand\">노래방 데이터</Link>\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n              <ul className=\"navbar-nav mr-auto\">\n              <li className=\"nav-item\">\n                  <Link to={'/index'} className=\"nav-link\">Data</Link>\n                </li>\n                <li className=\"nav-item\">\n                  <Link to={'/about'} className=\"nav-link\">About</Link>\n                </li>\n              </ul>\n            </div>\n          </nav> <br/>\n         \n          <Switch>\n              <Route exact path='/' component={ Home } />\n              <Route exact path='/index' component={ Index } />\n              <Route path='/about' component={ About } />\n          </Switch>\n        </header>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>, document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}